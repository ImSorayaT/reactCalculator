{"ast":null,"code":"var _jsxFileName = \"/Users/sorayataraszka/Documents/CodingProjects/Mine/React/calculator-project/src/components/Calculator.js\";\nimport React from \"react\";\nimport { evaluate } from 'mathjs';\nimport { CalculatorDisplay } from \"./CalculatorDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      calculate: '0',\n      display: '0',\n      equals: false\n    };\n    this.changeCalculate = this.changeCalculate.bind(this);\n    this.sumCalculate = this.sumCalculate.bind(this);\n    this.clearCalculate = this.clearCalculate.bind(this);\n    this.changeCharge = this.changeCharge.bind(this);\n  } //**\n  // Changes the equation value. \n  // First, it starts a new equation after '='\n  // then, it checks if the last character needs to be replaced\n  // eg. '+' by '-', so it's not '+-' \n  // or the first '0' by '5', so it's not '05' but just '5'\n  //**\n\n\n  changeCalculate(e) {\n    // if this input is not after an equals sign\n    this.setState(prevState => {\n      const newDisplayValue = this.getDisplayValue(e);\n      const newCalcValue = e.target.value;\n      const calcLength = prevState.calculate.length; // calculate state count\n\n      const lastCalcChar = prevState.calculate.slice(-1); // last letter of the calc state\n\n      const descLength = prevState.display.length; // display state count\n      // if equals was not the last button clicked\n\n      if (this.state.equals == false) {\n        if (isNaN(newCalcValue)) {\n          if (newCalcValue == '%') {\n            if (!isNaN(lastCalcChar)) {\n              // add to previous\n              return {\n                calculate: prevState.calculate + newCalcValue,\n                display: prevState.display + newDisplayValue\n              };\n            }\n          } else if (newCalcValue == '.') {\n            if (prevState.calculate.indexOf('.') == 0) {\n              if (!isNaN(lastCalcChar)) {\n                // add to previous\n                return {\n                  calculate: prevState.calculate + newCalcValue,\n                  display: prevState.display + newDisplayValue\n                };\n              } else if (lastCalcChar != '.') {\n                return {\n                  calculate: prevState.calculate + '0' + newCalcValue,\n                  display: prevState.display + '0' + newDisplayValue\n                };\n              }\n            }\n          } else {\n            if (isNaN(lastCalcChar)) {} else {\n              // add to previous\n              return {\n                calculate: prevState.calculate + newCalcValue,\n                display: prevState.display + newDisplayValue\n              };\n            }\n          } // if it's a number\n\n        } else {\n          // if it's the first input and the number is bigger than zero\n          if (calcLength == 1 && prevState.calculate == '0' && parseFloat(e.target.value) > 0) {\n            // replace the previous input\n            return {\n              calculate: prevState.calculate.slice(0, calcLength - 1) + newCalcValue,\n              display: prevState.display.slice(0, descLength - 1) + newDisplayValue\n            };\n          } else {\n            if (lastCalcChar != '%') {\n              // add to previous\n              return {\n                calculate: prevState.calculate + newCalcValue,\n                display: prevState.display + newDisplayValue\n              };\n            }\n          }\n        } // // if the last char was a '%' and new is a number\n        // if( lastCalcChar == '%' && !isNaN(newCalcValue)){\n        //     // ignore\n        //     return ({\n        //         calculate: prevState.calculate,\n        //         display: prevState.display,\n        //     });\n        // }else if(\n        //     // if it's the first input and the number is bigger than zero\n        //     calcLength == 1 && prevState.calculate == '0' && parseFloat(e.target.value) > 0 || \n        //     // if both previous and new input are not numbers, or the previous character isn't a '%'\n        //     isNaN(parseFloat(lastCalcChar)) && isNaN((parseFloat(newCalcValue)) ) && lastCalcChar !== '%' || \n        //     // if both previous and new value are not a '%'\n        //     lastCalcChar == '%' && newCalcValue == '%'\n        // ) {\n        //     // replace the previous input\n        //     return ({ \n        //         calculate: prevState.calculate.slice(0, calcLength -1) + newCalcValue,\n        //         display: prevState.display.slice(0, descLength -1) + newDisplayValue,\n        //     });\n        // }else{\n        //     // add to previous\n        //     return ({ \n        //         calculate: prevState.calculate + newCalcValue,\n        //         display: prevState.display + newDisplayValue,\n        //     });\n        // }\n        // if it's first chara after '='\n\n      } else {\n        // if new value is not a number\n        if (isNaN(newCalcValue)) {\n          // add to previous values\n          return {\n            calculate: prevState.calculate + newCalcValue,\n            display: prevState.display + newDisplayValue\n          };\n        } else {\n          // replace the previous value entirely\n          return {\n            calculate: newCalcValue,\n            display: newDisplayValue\n          };\n        }\n      }\n    });\n    this.clearEquals();\n  } // Switches the last number between positive and negative\n\n\n  changeCharge(e) {\n    this.setState(prevState => {\n      // The whole calculation length   \n      const calcLength = prevState.calculate.length; // calculate state count\n      // Last Item\n\n      console.log(prevState.calculate);\n\n      if (prevState.calculate == 'Infinity' || prevState.calculate == '-Infinity') {\n        if (prevState.calculate == 'Infinity') {\n          return {\n            calculate: '-Infinity',\n            display: '-Infinity'\n          };\n        } else {\n          return {\n            calculate: 'Infinity',\n            display: 'Infinity'\n          };\n        }\n      } else {\n        const calcSplit = prevState.calculate.match(/(?:\\d+\\.)?\\d+/g); // split by numbers\n\n        const lastItem = calcSplit[calcSplit.length - 1]; // get the last number\n\n        const lastItemLength = lastItem.length; // char count of the last number\n        // Before items\n\n        const beforeLast = prevState.calculate.charAt(calcLength - lastItem.length - 1);\n        const beforeBeforeLast = prevState.calculate.charAt(calcLength - lastItem.length - 2);\n        console.log(lastItem); // if there's only one number\n\n        if (calcSplit.length == 1) {\n          // if there's a '-' in front of that number\n          if (prevState.calculate.charAt(0) == '-') {\n            // remove the first character\n            return {\n              calculate: prevState.calculate.substr(1),\n              display: prevState.display.substr(1)\n            }; // if there isn't a '-' in front of that number\n          } else if (prevState.calculate != '0') {\n            // add '-' in front of the first number\n            return {\n              calculate: '-' + prevState.calculate,\n              display: '-' + prevState.display\n            };\n          } // if there's more than one number\n\n        } else {\n          const newLastNumber = '-' + lastItem; // add '-' in front of the last number\n          //**\n          // this is to double-check if the two symbols in front of the last number are not eg. 2 - -2\n          // if they are the second '-' needs to be removed to make the second 2 a positive number\n          //**\n          // if the char before the last number and the character before it are not numbers\n          // and if the character before the character in front of the number isn't a '%'\n\n          if (lastItem == '0') {\n            return {\n              calculate: prevState.calculate,\n              display: prevState.display\n            };\n          } else if (isNaN(beforeLast) && isNaN(beforeBeforeLast) && beforeBeforeLast != '%') {\n            // remove the first character before the last number\n            return {\n              calculate: prevState.calculate.slice(0, calcLength - lastItemLength - 1) + lastItem,\n              display: prevState.display.slice(0, calcLength - lastItemLength - 1) + lastItem\n            };\n          } else {\n            // replace the last number with the newLastNumber (with the '-')\n            return {\n              calculate: prevState.calculate.toString().slice(0, calcLength - lastItemLength) + newLastNumber,\n              display: prevState.display.toString().slice(0, calcLength - lastItemLength) + newLastNumber\n            };\n          }\n        }\n      }\n    });\n  } // The clear button\n\n\n  clearCalculate(e) {\n    this.setState(() => ({\n      display: '0',\n      calculate: '0'\n    }));\n    this.clearEquals();\n  } // The equals button\n\n\n  sumCalculate(e) {\n    let result = '';\n    result = evaluate(this.state.calculate);\n\n    if (result != null) {\n      this.setState(() => ({\n        display: result.toString(),\n        calculate: result.toString(),\n        equals: true\n      }));\n    }\n  } // clears the state checking if the last input was '='\n\n\n  clearEquals() {\n    this.setState(() => ({\n      equals: false\n    }));\n  } // checks if the button has a display attribute\n  // if not, the calculator will display the value attribute\n  // that helps us display '*' as 'x'\n\n\n  getDisplayValue(e) {\n    let displayValue = '';\n\n    if (e.target.getAttribute('display') !== null) {\n      displayValue = e.target.getAttribute('display');\n    } else {\n      displayValue = e.target.value;\n    }\n\n    return displayValue;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CalculatorDisplay, {\n      changeCalculate: this.changeCalculate,\n      sumCalculate: this.sumCalculate,\n      clearCalculate: this.clearCalculate,\n      changeCharge: this.changeCharge,\n      display: this.state.display\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","evaluate","CalculatorDisplay","Calculator","Component","constructor","props","state","calculate","display","equals","changeCalculate","bind","sumCalculate","clearCalculate","changeCharge","e","setState","prevState","newDisplayValue","getDisplayValue","newCalcValue","target","value","calcLength","length","lastCalcChar","slice","descLength","isNaN","indexOf","parseFloat","clearEquals","console","log","calcSplit","match","lastItem","lastItemLength","beforeLast","charAt","beforeBeforeLast","substr","newLastNumber","toString","result","displayValue","getAttribute","render"],"sources":["/Users/sorayataraszka/Documents/CodingProjects/Mine/React/calculator-project/src/components/Calculator.js"],"sourcesContent":["import React from \"react\";\nimport { evaluate } from 'mathjs';\nimport { CalculatorDisplay } from \"./CalculatorDisplay\";\n\nexport class Calculator extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            calculate : '0',\n            display: '0',\n            equals: false\n        };\n\n        this.changeCalculate = this.changeCalculate.bind(this);\n        this.sumCalculate = this.sumCalculate.bind(this);\n        this.clearCalculate = this.clearCalculate.bind(this);\n        this.changeCharge = this.changeCharge.bind(this);\n\n    }\n\n\n    //**\n    // Changes the equation value. \n    // First, it starts a new equation after '='\n    // then, it checks if the last character needs to be replaced\n    // eg. '+' by '-', so it's not '+-' \n    // or the first '0' by '5', so it's not '05' but just '5'\n    //**\n    changeCalculate(e){\n    \n        // if this input is not after an equals sign\n        this.setState((prevState) => {\n            const newDisplayValue = this.getDisplayValue(e);\n            const newCalcValue = e.target.value;\n\n            const calcLength = prevState.calculate.length; // calculate state count\n            const lastCalcChar = prevState.calculate.slice(-1); // last letter of the calc state\n    \n            const descLength = prevState.display.length; // display state count\n\n            // if equals was not the last button clicked\n            if(this.state.equals == false){\n\n                if(isNaN(newCalcValue)){\n\n                    if(newCalcValue == '%'){\n                        \n                        if(!isNaN(lastCalcChar)){\n\n                            // add to previous\n                            return ({ \n                                calculate: prevState.calculate + newCalcValue,\n                                display: prevState.display + newDisplayValue,\n                            });\n\n                        }\n                    \n                    }else if(newCalcValue == '.'){\n\n                        if(prevState.calculate.indexOf('.') == 0){\n                            if(!isNaN(lastCalcChar)){\n\n                                // add to previous\n                                return ({ \n                                    calculate: prevState.calculate + newCalcValue,\n                                    display: prevState.display + newDisplayValue,\n                                });\n                            }else if(lastCalcChar != '.'){\n                                return ({ \n                                    calculate: prevState.calculate + '0' + newCalcValue,\n                                    display: prevState.display + '0' + newDisplayValue,\n                                });\n                            }\n                        }\n\n                    }else{\n                        if(isNaN(lastCalcChar)){\n\n                        }else{\n                            // add to previous\n                            return ({ \n                                calculate: prevState.calculate + newCalcValue,\n                                display: prevState.display + newDisplayValue,\n                            });\n                        }\n                    }\n\n                // if it's a number\n                }else{\n                    // if it's the first input and the number is bigger than zero\n                    if(calcLength == 1 && prevState.calculate == '0' && parseFloat(e.target.value) > 0 ){\n\n                        // replace the previous input\n                        return ({ \n                            calculate: prevState.calculate.slice(0, calcLength -1) + newCalcValue,\n                            display: prevState.display.slice(0, descLength -1) + newDisplayValue,\n                        });\n                    }else{\n                        if(lastCalcChar != '%'){\n                            // add to previous\n                            return ({ \n                                calculate: prevState.calculate + newCalcValue,\n                                display: prevState.display + newDisplayValue,\n                            });\n                        }\n\n                    }\n\n                }\n\n                \n\n                // // if the last char was a '%' and new is a number\n                // if( lastCalcChar == '%' && !isNaN(newCalcValue)){\n\n                //     // ignore\n                //     return ({\n                //         calculate: prevState.calculate,\n                //         display: prevState.display,\n                //     });\n                \n                \n                // }else if(\n                //     // if it's the first input and the number is bigger than zero\n                //     calcLength == 1 && prevState.calculate == '0' && parseFloat(e.target.value) > 0 || \n                //     // if both previous and new input are not numbers, or the previous character isn't a '%'\n                //     isNaN(parseFloat(lastCalcChar)) && isNaN((parseFloat(newCalcValue)) ) && lastCalcChar !== '%' || \n                //     // if both previous and new value are not a '%'\n                //     lastCalcChar == '%' && newCalcValue == '%'\n                // ) {\n\n                //     // replace the previous input\n                //     return ({ \n                //         calculate: prevState.calculate.slice(0, calcLength -1) + newCalcValue,\n                //         display: prevState.display.slice(0, descLength -1) + newDisplayValue,\n                //     });\n\n                // }else{\n\n                //     // add to previous\n                //     return ({ \n                //         calculate: prevState.calculate + newCalcValue,\n                //         display: prevState.display + newDisplayValue,\n                //     });\n                // }\n            \n            // if it's first chara after '='\n            }else{            \n                // if new value is not a number\n                if(isNaN(newCalcValue)){\n                    // add to previous values\n                    return ({ \n                        calculate: prevState.calculate + newCalcValue,\n                        display: prevState.display + newDisplayValue,\n                    });\n                }else{\n\n                    // replace the previous value entirely\n                    return ({ \n                        calculate: newCalcValue,\n                        display: newDisplayValue\n                    });\n                }\n            }\n\n        });\n\n        this.clearEquals();\n    }\n\n    // Switches the last number between positive and negative\n    changeCharge(e){\n        this.setState((prevState) => {     \n            // The whole calculation length   \n            const calcLength = prevState.calculate.length; // calculate state count\n\n            // Last Item\n            console.log(prevState.calculate);\n            if(prevState.calculate == 'Infinity' || prevState.calculate == '-Infinity'){\n                \n                if(prevState.calculate == 'Infinity'){\n                    return ({\n                        calculate: '-Infinity',\n                        display: '-Infinity'\n                    });\n                }else{\n                    return ({\n                        calculate: 'Infinity',\n                        display: 'Infinity'\n                    });\n                }\n\n            }else{\n                const calcSplit = prevState.calculate.match(/(?:\\d+\\.)?\\d+/g); // split by numbers\n                const lastItem = calcSplit[calcSplit.length - 1]; // get the last number\n                const lastItemLength = lastItem.length; // char count of the last number\n\n                // Before items\n                const beforeLast = prevState.calculate.charAt( calcLength - lastItem.length - 1);\n                const beforeBeforeLast = prevState.calculate.charAt( calcLength - lastItem.length - 2);\n\n\n                console.log(lastItem);\n\n                // if there's only one number\n                if( calcSplit.length == 1 ){\n                    \n                    // if there's a '-' in front of that number\n                    if(prevState.calculate.charAt( 0) == '-'){\n\n                        // remove the first character\n                        return ({\n                            calculate: prevState.calculate.substr(1),\n                            display: prevState.display.substr(1)\n                        });\n\n                        // if there isn't a '-' in front of that number\n                    }else if(prevState.calculate != '0'){\n\n                        // add '-' in front of the first number\n                        return ({\n                            calculate: '-' + prevState.calculate,\n                            display: '-' + prevState.display\n                        });\n                    }\n                    \n                    // if there's more than one number\n                }else{\n                    const newLastNumber = '-' + lastItem; // add '-' in front of the last number\n\n                    //**\n                    // this is to double-check if the two symbols in front of the last number are not eg. 2 - -2\n                    // if they are the second '-' needs to be removed to make the second 2 a positive number\n                    //**\n\n                    // if the char before the last number and the character before it are not numbers\n                    // and if the character before the character in front of the number isn't a '%'\n                    if(lastItem == '0'){\n\n                        return ({\n                            calculate: prevState.calculate,\n                            display: prevState.display\n                        });\n\n                    }else if( isNaN(beforeLast) && isNaN(beforeBeforeLast) && beforeBeforeLast != '%' ){\n                        \n                        // remove the first character before the last number\n                        return ({\n                            calculate: prevState.calculate.slice(0, calcLength - lastItemLength - 1) + lastItem,\n                            display: prevState.display.slice(0, calcLength - lastItemLength - 1) + lastItem\n                        });\n                    }else{\n                        // replace the last number with the newLastNumber (with the '-')\n                        return ({\n                            calculate: prevState.calculate.toString().slice(0, calcLength - lastItemLength) + newLastNumber,\n                            display: prevState.display.toString().slice(0, calcLength - lastItemLength) + newLastNumber\n                        });\n                    }\n\n                }\n            }\n        });\n    }\n\n    // The clear button\n    clearCalculate(e){\n        this.setState(() => ({ \n            display: '0',\n            calculate: '0',\n        }));\n\n        this.clearEquals();\n    }\n\n    // The equals button\n    sumCalculate(e){\n        let result = '';\n        result = evaluate(this.state.calculate);\n\n        if(result != null){\n            this.setState(() => ({ \n                display: result.toString(),\n                calculate: result.toString(),\n                equals: true\n            }));\n        }\n\n    }\n\n    // clears the state checking if the last input was '='\n    clearEquals(){\n        this.setState(() => ({ \n            equals: false\n        }));\n    }\n\n    // checks if the button has a display attribute\n    // if not, the calculator will display the value attribute\n    // that helps us display '*' as 'x'\n    getDisplayValue(e) {\n\n        let displayValue = '';\n\n        if(e.target.getAttribute('display') !== null){\n            displayValue = e.target.getAttribute('display');\n        }else{\n            displayValue = e.target.value;\n        }\n\n        return displayValue;\n\n    }\n\n\n    render(){\n        return(  \n           <CalculatorDisplay \n            changeCalculate={this.changeCalculate}  \n            sumCalculate={this.sumCalculate} \n            clearCalculate={this.clearCalculate} \n            changeCharge={this.changeCharge}\n            display={this.state.display} \n            />\n        );\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}